import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import random

# 그림의 크기와 속도 조정 설정
그림_크기 = 5
길이_배율 = 1.5  # 선의 길이 증가
속도_배율 = 1.3 * 1.3  # 움직임 속도 추가 증가

# 중앙 원의 위치와 반지름 설정
중앙_원 = (그림_크기 / 2, 그림_크기 / 2)
반지름_원 = 0.5 / 2  # 원의 반지름 설정

# 파란 원들의 위치를 사전에 정의 및 조정
파란_원_위치 = [
    (중앙_원[0] + (x - 중앙_원[0]) * 길이_배율,
     중앙_원[1] + (y - 중앙_원[1]) * 길이_배율)
    for x, y in [
        (1, 1), (1, 그림_크기 - 1),
        (그림_크기 - 1, 1), (그림_크기 - 1, 그림_크기 - 1),
        (그림_크기 / 2, 1), (그림_크기 / 2, 그림_크기 - 1),
        (1, 그림_크기 / 2), (그림_크기 - 1, 그림_크기 / 2)
    ]
]

# 파란 원의 초기 순서 설정
초기_파란_원_위치 = 파란_원_위치.copy()

# 움직이는 원의 초기 위치와 이동 여부 추적
빨간_원_위치 = 중앙_원
움직임_중 = True
섞기_간격 = len(파란_원_위치) * 2  # 순서 바꾸는 간격 설정

# 초기 목표 원을 무작위로 선택
현재_목표_원 = random.choice(파란_원_위치)

# 빨간 원의 색상을 틸색으로 변경
빨간_원_색상 = '#008080'
# 파란 원의 색상을 특정한 파란색으로 변경
파란_원_색상 = '#2e5d8d'

def 애니메이션(i, 빨간_원_패치, 중앙_원, 파란_원_위치, 목표_프레임):
    global 빨간_원_위치, 움직임_중, 섞기_간격, 현재_목표_원

    원_인덱스 = i // (2 * 목표_프레임)
    단계 = i % (2 * 목표_프레임)

    if 원_인덱스 < len(파란_원_위치):
        목표_원 = 현재_목표_원

        if 단계 < 목표_프레임:
            # 원이 목표 원 쪽으로 이동
            분수 = min(단계 / 목표_프레임 * 속도_배율, 1)
            새로운_x = 중앙_원[0] + 분수 * (목표_원[0] - 중앙_원[0])
            새로운_y = 중앙_원[1] + 분수 * (목표_원[1] - 중앙_원[1])
            빨간_원_위치 = (새로운_x, 새로운_y)
            움직임_중 = True
        else:
            # 원이 되돌아오는 경로 이동
            분수 = min((단계 - 목표_프레임) / 목표_프레임 * 속도_배율, 1)
            새로운_x = 목표_원[0] - 분수 * (목표_원[0] - 중앙_원[0])
            새로운_y = 목표_원[1] - 분수 * (목표_원[1] - 중앙_원[1])
            빨간_원_위치 = (새로운_x, 새로운_y)
            움직임_중 = True

        빨간_원_패치.center = 빨간_원_위치

    if 원_인덱스 < len(파란_원_위치) and 단계 >= 2 * 목표_프레임 - 1:
        if 움직임_중:
            # 순서 바꾸는 간격마다 파란 원 순서를 다시 무작위로 섞음
            if random.randint(0, 섞기_간격 - 1) == 0:
                random.shuffle(파란_원_위치)
            현재_목표_원 = random.choice(파란_원_위치)
            움직임_중 = False  # 움직임 중인지 여부 초기화

    return 빨간_원_패치

fig, ax = plt.subplots(figsize=(9, 7))  # 창 크기 설정
ax.set_xlim(0, 그림_크기)
ax.set_ylim(0, 그림_크기)
ax.axis('off')

# 파란 원들과 선들 추가
for x, y in 파란_원_위치:
    파란_원_패치 = plt.Circle((x, y), 반지름_원 * 0.8, color=파란_원_색상, fill=True)
    ax.add_patch(파란_원_패치)

# 선 추가 (파란 원들 아래에)
for x, y in 파란_원_위치:
    ax.plot([중앙_원[0], x], [중앙_원[1], y], color='black', zorder=0)

# 원 추가 (파란 원들 위에)
빨간_원_패치 = plt.Circle(중앙_원, 반지름_원 * 0.8, color=빨간_원_색상, fill=True)
ax.add_patch(빨간_원_패치)

# 애니메이션 파라미터 설정
목표_프레임 = int(60 / (속도_배율 * 2))
총_프레임_원_당 = 2 * 목표_프레임
총_애니메이션_프레임 = 총_프레임_원_당 * len(파란_원_위치)

# 애니메이션 시작 (무한 반복 설정)
ani = animation.FuncAnimation(fig, 애니메이션, frames=총_애니메이션_프레임, interval=30, 
                              fargs=(빨간_원_패치, 중앙_원, 초기_파란_원_위치, 목표_프레임), repeat=True)

# 애니메이션을 90초 후에 자동으로 종료하도록 타이머 설정
타이머 = fig.canvas.new_timer(interval=90000)
타이머.add_callback(plt.close, fig)
타이머.start()

plt.show()
